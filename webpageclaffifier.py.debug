from bs4 import BeautifulSoup
import re
import math
import urllib.request

#import requests
#import categorize

def ngrams(input, n):
  input = input.split(' ')
  output = []
  for i in range(len(input)-n+1):
    output.append(input[i:i+n])
  return output


def checkforwordinurl(url,wordlist):
	for word in wordlist:
		if word in url:
			return True
		else:
			return False	

def extractallclassnames(taglist,attrib,html_doc):
	soup = BeautifulSoup(html_doc, 'html.parser')
	classlist=[]
	##print(soup.find_all('tr'))
	for tag in taglist:
		for classtags in soup.find_all(tag):
			classlist.append(classtags.get(attrib))
	return classlist		

"""def numberoftags(taglist,html_doc):
	soup = BeautifulSoup(html_doc, 'html.parser')
	count=0
	for tag in taglist:
		for classtags in soup.findall(tag):
				count+=1"""



# good for comparing between classifieds and shopping websites
# def similaritymeasure(html_doc_parsedtext,golden_list):
# finds the normalized cosine overlap between two texts
def cosinesimilaritymeasure(words,goldwords):
	wordfreq=dict()
	goldwordfreq=dict()
	commonwords=[]
	cosinesum=0
	sumgoldwords=0
	sumwords=0
	print('TEXT::')
	print(words)
	print('GOLDTEXT::')
	print(goldwords)
	


	for goldword in goldwords:
		if goldword in goldwordfreq.keys():
			goldwordfreq[goldword]=goldwordfreq[goldword]+1
		else:
			goldwordfreq[goldword]=1

	for word in words:
		if word in wordfreq.keys():
			wordfreq[word]=wordfreq[word]+1
		else:
			wordfreq[word]=1	


	for word in goldwords:
		if word in wordfreq.keys():
			if word in goldwordfreq.keys():
				commonwords.append(word)
				#print('word::'+word)
				#print('gold freq::'+str(goldwordfreq[word]))
				#print('freq::'+str(wordfreq[word]))
				cosinesum+=goldwordfreq[word]*wordfreq[word]
	#print('cosinesum'+str(cosinesum))

	print(commonwords)

	for word in goldwords:
		sumgoldwords+=goldwordfreq[word]*goldwordfreq[word]
	#print('sumgoldwords'+str(sumgoldwords))	

	for word in commonwords:
		sumwords+=wordfreq[word]*wordfreq[word]
	#print('sumwords'+str(sumwords))	

	sumwords=math.sqrt(sumwords)
	sumgoldwords=math.sqrt(sumgoldwords)
	if sumgoldwords!=0 and sumwords!=0:
		return cosinesum/(sumwords*sumgoldwords)	
	return 0	
				

		
def categorizeurl(url):
	url_type='undecided'
	#site=requests.get(url)
	req = urllib.request.Request(url)
	with urllib.request.urlopen(req) as response:
		html_content = response.read()
	#html_content=site.content
	
	#print('THE CONTENT')
	#print(html_content)
	#check for blog providers name in the url
	blogproviderslist=[]
	blogproviders=open("blogs.txt",'r',encoding='cp1252', errors='ignore')

	for line in blogproviders:
		line=line.rstrip('\n')
		blogproviderslist.append(line)

	#print("blogproviderslist::")
	#print(blogproviderslist)	
		
	if checkforwordinurl(url,blogproviderslist):
			url_type='blog'
			return url_type
		

	#check for the word 'forum' in the url

	if 'forum' in url:
		url_type='forum'
		return url_type

	#check if it's a forum: by cosine similarity on the 'class' attribute of <tr>, <td> and <table> tags

	forumclassnamelist=[]
	forumclassnames=open("forum.txt",'r',encoding='cp1252', errors='ignore')

	for line in forumclassnames:
		line=line.rstrip('\n')
		forumclassnamelist.append(line)

	#print('forumclassnamelist::')
	#print(forumclassnamelist)
	

	tags=['tr','td','table']	
	classlist=extractallclassnames(tags,'class',html_content)
	classlist = [i for i in classlist if i is not None]
	classlist=[item for sublist in classlist for item in sublist]
	#print(classlist)
	classlist=[j for i in classlist for j in forumclassnamelist if j in i]	
	#print(classlist)	
				 

	#print('EXTRACTED CLASSES::')
	#print(classlist)

	score=cosinesimilaritymeasure(classlist,forumclassnamelist)
	#print(score)
	if score>=0.5:
		url_type='forum'
		return url_type

	#check if a classified or shopping website

	shoppinglist=[]
	shopping=open("shopping.txt",'r',encoding='cp1252', errors='ignore')
	classifiedlist=[]
	classified=open("classified.txt",'r',encoding='cp1252', errors='ignore')

	for line in shopping:
		line=line.rstrip('\n')
		shoppinglist.append(line)

	for line in classified:
		line=line.rstrip('\n')
		classifiedlist.append(line)	

	re.sub('[^A-Za-z0-9]+',' ', str(html_content))
	#print('shoppinglist::')
	#print(shoppinglist)
	#print('classifiedlist::')
	#print(classifiedlist)	
	html_content=str(html_content).split(' ')+[' '.join(x) for x in ngrams(str(html_content), 2)]
	

	classifiedscore=cosinesimilaritymeasure(html_content,classifiedlist)
	shoppingscore=cosinesimilaritymeasure(html_content,shoppinglist)

	#print('shop score::')
	#print(shoppingscore)
	#print('classified score::')
	#print(classifiedscore)
	if classifiedscore>shoppingscore:
		if classifiedscore>0.5:
			url_type='classified'
			return url_type
	if shoppingscore>classifiedscore:
		if shoppingscore>0.5:
			url_type='shopping'
			return url_type
					

	#call hyperian grey classifier if indecisive
	#if url_type=='undecided':
		#fs = DumbCategorize(url)
	    ##print(fs.categorize())
	
	return url_type


if __name__ == "__main__":
   
	#print('It begins')
	url="https://forums.gentoo.org/"
	print(categorizeurl(url))


